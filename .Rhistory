yPoints = rep(NA, 10)
for(i in 1:10){
xPoints[i] = mean(trainCopy$predictedVals[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)])
yPoints[i] = mean(trainCopy$posteam_won[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)])
}
print(xPoints)
print(yPoints)
# plot(x = xPoints, y = yPoints, main = "Calibration Plot", xlab = "Predicted Probability", ylab = "Actual Proportion of Wins")
}
calibPlot(model, nfldata_train)
calibPlot <- function(model, trainData){
trainCopy = trainData
trainCopy$predictedVals <- predict(model, newdata = trainData)
print(mean(trainCopy$predictedVals))
xPoints = rep(NA, 10)
yPoints = rep(NA, 10)
for(i in 1:10){
xPoints[i] = mean(trainCopy$predictedVals[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)])
yPoints[i] = mean(trainCopy$posteam_won[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)])
}
print(xPoints)
print(yPoints)
# plot(x = xPoints, y = yPoints, main = "Calibration Plot", xlab = "Predicted Probability", ylab = "Actual Proportion of Wins")
}
calibPlot(model, nfldata_train)
calibPlot <- function(model, trainData){
trainCopy = trainData
trainCopy$predictedVals <- predict(model, newdata = trainData)
print(mean(trainCopy$predictedVals, na.rm = TRUE))
xPoints = rep(NA, 10)
yPoints = rep(NA, 10)
for(i in 1:10){
xPoints[i] = mean(trainCopy$predictedVals[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)])
yPoints[i] = mean(trainCopy$posteam_won[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)])
}
print(xPoints)
print(yPoints)
# plot(x = xPoints, y = yPoints, main = "Calibration Plot", xlab = "Predicted Probability", ylab = "Actual Proportion of Wins")
}
calibPlot(model, nfldata_train)
calibPlot <- function(model, trainData){
trainCopy = trainData
trainCopy$predictedVals <- predict(model, newdata = trainData)
print(mean(trainCopy$predictedVals, na.rm = TRUE))
xPoints = rep(NA, 10)
yPoints = rep(NA, 10)
for(i in 1:10){
xPoints[i] = mean(trainCopy$predictedVals[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
yPoints[i] = mean(trainCopy$posteam_won[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
}
print(xPoints)
print(yPoints)
# plot(x = xPoints, y = yPoints, main = "Calibration Plot", xlab = "Predicted Probability", ylab = "Actual Proportion of Wins")
}
calibPlot(model, nfldata_train)
calibPlot <- function(model, trainData){
trainCopy = trainData
trainCopy$predictedVals <- predict(model, newdata = trainData)
xPoints = rep(NA, 10)
yPoints = rep(NA, 10)
for(i in 1:10){
xPoints[i] = mean(trainCopy$predictedVals[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
yPoints[i] = mean(trainCopy$posteam_won[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
}
print(xPoints)
print(yPoints)
plot(x = xPoints, y = yPoints, main = "Calibration Plot", xlab = "Predicted Probability", ylab = "Actual Proportion of Wins")
}
calibPlot(model, nfldata_train)
calibPlot <- function(model, trainData){
trainCopy = trainData
trainCopy$predictedVals <- predict(model, newdata = trainData)
xPoints = rep(NA, 10)
yPoints = rep(NA, 10)
for(i in 1:10){
xPoints[i] = mean(trainCopy$predictedVals[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
yPoints[i] = mean(trainCopy$posteam_won[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
}
print(xPoints)
print(yPoints)
plot(x = xPoints, y = yPoints, main = "Calibration Plot", xlab = "Predicted Probability", ylab = "Actual Proportion of Wins", ylim = c(0, 1))
}
calibPlot(model, nfldata_train)
calibPlot <- function(model, trainData){
trainCopy = trainData
trainCopy$predictedVals <- predict(model, newdata = trainData)
xPoints = rep(NA, 10)
yPoints = rep(NA, 10)
for(i in 1:10){
xPoints[i] = mean(trainCopy$predictedVals[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
yPoints[i] = mean(trainCopy$posteam_won[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
}
print(xPoints)
print(yPoints)
plot(x = xPoints, y = yPoints, main = "Calibration Plot", xlab = "Predicted Probability", ylab = "Actual Proportion of Wins", ylim = c(0, 1))
}
calibPlot(model, nfldata_test)
calibPlot <- function(model, trainData){
trainCopy = trainData
trainCopy$predictedVals <- predict(model, newdata = trainData)
xPoints = rep(NA, 10)
yPoints = rep(NA, 10)
for(i in 1:10){
xPoints[i] = mean(trainCopy$predictedVals[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
yPoints[i] = mean(trainCopy$posteam_won[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
}
print(xPoints)
print(yPoints)
plot(x = xPoints, y = yPoints, main = "Calibration Plot", xlab = "Predicted Probability", ylab = "Actual Proportion of Wins", ylim = c(0, 1))
}
calibPlot(model, nfldata_train)
punt_fg_data <- read.csv("punt_fg_probs.csv")
fg_prob_test <- punt_fg_data$fg
print(fg_prob_test)
punt_fg_data <- read.csv("punt_fg_probs.csv")
fg_prob <- punt_fg_data$fg
punt_dist <- punt_fg_data$punt
for(i in 1:length(punt_dist)){
if(punt_dist[i] == 0){
punt_dist[i] <- NA
}
}
print(punt_dist)
run_prob <- c(0.66517814, 0.6114814,  0.55893096, 0.50774364, 0.45813627, 0.41032565,
0.36452863, 0.320962,   0.27984261, 0.24138727, 0.2058128,  0.17333602,
0.14417376, 0.11854284, 0.09666007, 0.07874229, 0.06500631, 0.05566895,
0.05094704, 0.0510574)
pass_prob <- c(0.56292782, 0.53162334, 0.50022819, 0.46887784, 0.43770777, 0.40685347,
0.37645042, 0.3466341,  0.31753999, 0.28930358, 0.26206034, 0.23594576,
0.21109532, 0.18764451, 0.1657288,  0.14548367, 0.12704462, 0.11054711,
0.09612664, 0.08391869)
run_prob_data <- read.csv("run_probs.csv")
print(run_prob_data)
run_prob <- run_prob_data$X0
print(run_prob)
punt_fg_data <- read.csv("punt_fg_probs.csv")
fg_prob <- punt_fg_data$fg
punt_dist <- punt_fg_data$punt
for(i in 1:length(punt_dist)){
if(punt_dist[i] == 0){
punt_dist[i] <- NA
}
}
run_prob_data <- read.csv("run_probs.csv")
run_prob <- run_prob_data$X0
pass_prob_data <- read.csv("pass_probs.csv")
pass_prob <- pass_prob_data$X0
run_time_data <- read.csv("runtime.csv")
data$X0
run_times <- run_time_data$X0
print(run_times)
run_time_data <- read.csv("runtime.csv")
pass_time_data <- read.csv("passtime.csv")
run_times <- run_time_data$X0
pass_times <- pass_time_data$X0
intercept_calcs <- read.csv("intercept_probs.csv")
intercept_probs <- intercept_calcs$prob
intercept_td_probs <- intercept_calcs$td_prob
intercept_return <- intercept_calcs$return
f <- function(ydline, ydstogo, margin_curr, time_left){
predictions <- c(0, 0, 0, 0)
# Punts
if(is.na(punt_dist[ydline])){
x_punt <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 80)
predictions[1] = 1 - mgcv::predict.bam(model, newdata = x_punt, type = "response")[1]
}
else{
x_punt <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 100-(ydline-punt_dist[ydline]))
predictions[1] = 1 - mgcv::predict.bam(model, newdata = x_punt, type = "response")[1]
}
# Field Goals
x_fg_success <- data.frame("margin" = -margin_curr - 3, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr - 3)/(time_left+1), "yardline_100" = 75)
fg_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_fg_success, type = "response")[1]
x_fg_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = min(80, 100-(ydline+8)))
fg_fail_wp <- 1 - mgcv::predict.bam(model, newdata = x_fg_fail, type = "response")[1]
predictions[2] = fg_prob[ydline]*(fg_success_wp)+(1-fg_prob[ydline])*(fg_fail_wp)
# Run Plays
if(ydstogo >= ydline){
x_run_success <- data.frame("margin" = -margin_curr - 6.970960661826777, "game_seconds_remaining" = time_left - run_times[ydstogo], "margin_time_ratio" = (-margin_curr-6.970960661826777)/(time_left - run_times[ydstogo]+1), "yardline_100" = 75)
run_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_run_success, type = "response")[1]
}
else{
x_run_success <- data.frame("margin" = margin_curr, "game_seconds_remaining" = time_left - run_times[ydstogo], "margin_time_ratio" = (margin_curr)/(time_left - run_times[ydstogo]+1), "yardline_100" = ydline-ydstogo)
run_success_wp <- mgcv::predict.bam(model, newdata = x_run_success, type = "response")[1]
}
x_run_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left - run_times[ydstogo], "margin_time_ratio" = (-margin_curr)/(time_left - run_times[ydstogo]+1), "yardline_100" = 100-ydline)
run_fail_wp <- 1-mgcv::predict.bam(model, newdata = x_run_fail, type = "response")[1]
predictions[3] = run_prob[ydstogo]*(run_success_wp)+(1-run_prob[ydstogo])*(run_fail_wp)
# Pass Plays
if(ydstogo >= ydline){
x_pass_success <- data.frame("margin" = -margin_curr - 6.970960661826777, "game_seconds_remaining" = time_left - pass_times[ydstogo], "margin_time_ratio" = (-margin_curr-6.970960661826777)/(time_left- pass_times[ydstogo]+1), "yardline_100" = 75)
pass_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_pass_success, type = "response")[1]
}
else{
x_pass_success <- data.frame("margin" = margin_curr, "game_seconds_remaining" = time_left- pass_times[ydstogo], "margin_time_ratio" = (margin_curr)/(time_left- pass_times[ydstogo]+1), "yardline_100" = ydline-ydstogo)
pass_success_wp <- mgcv::predict.bam(model, newdata = x_pass_success, type = "response")[1]
}
x_pass_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left- pass_times[ydstogo], "margin_time_ratio" = (-margin_curr)/(time_left- pass_times[ydstogo]+1), "yardline_100" = 100-ydline)
pass_fail_wp <- 1-mgcv::predict.bam(model, newdata = x_pass_fail, type = "response")[1]
x_pass_intercept <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left- pass_times[ydstogo], "margin_time_ratio" = (-margin_curr)/(time_left- pass_times[ydstogo]+1), "yardline_100" = max(min(100-ydline - intercept_return[ydline], 99), 1))
pass_intercept_wp <- 1-mgcv::predict.bam(model, newdata = x_pass_intercept, type = "response")[1]
predictions[4] = pass_prob[ydstogo]*(pass_success_wp)+(1-pass_prob[ydstogo] - intercept_probs[ydline])*(pass_fail_wp) + intercept_probs[ydline]*pass_intercept_wp
print(predictions)
return(which.max(predictions))
}
pass_fail_yds_data <- read.csv("pass_fails.csv")
print(pass_fail_yds_data)
print(pass_fail_yds_data[0])
print(pass_fail_yds_data$X)
print(pass_fail_yds_data$X[2])
print(pass_fail_yds_data$X[3])
pass_fail_yds_data <- read.csv("pass_fails.csv")
run_fail_yds_data <- read.csv("run_fails.csv")
print(pass_fail_yds_data$X[3])
print(pass_fail_yds_data$3[3])
pass_fail_yds_data <- read.csv("pass_fails.csv")
run_fail_yds_data <- read.csv("run_fails.csv")
print(pass_fail_yds_data$3[3])
pass_fail_yds_data <- read.csv("pass_fails.csv")
run_fail_yds_data <- read.csv("run_fails.csv")
print(pass_fail_yds_data$X3[3])
print(pass_fail_yds_data[3, 3])
pass_fail_yds_data <- read.csv("pass_fails.csv")
run_fail_yds_data <- read.csv("run_fails.csv")
print(pass_fail_yds_data[3, 3])
pass_fail_yds_data <- read.csv("pass_fails.csv")
run_fail_yds_data <- read.csv("run_fails.csv")
print(pass_fail_yds_data)
pass_fail_yds_data <- read.csv("pass_fails.csv")
run_fail_yds_data <- read.csv("run_fails.csv")
print(pass_fail_yds_data[3, 3])
pass_fail_yds_data <- read.csv("pass_fails.csv")
run_fail_yds_data <- read.csv("run_fails.csv")
print(pass_fail_yds_data[1, 1])
pass_fail_yds_data <- read.csv("pass_fails.csv")
run_fail_yds_data <- read.csv("run_fails.csv")
print(pass_fail_yds_data)
pass_fail_yds_data <- read.csv("pass_fails.csv")
run_fail_yds_data <- read.csv("run_fails.csv")
print(pass_fail_yds_data[1, 3])
pass_fail_yds_data <- read.csv("pass_fails.csv")
run_fail_yds_data <- read.csv("run_fails.csv")
print(pass_fail_yds_data[2, 3])
f <- function(ydline, ydstogo, margin_curr, time_left){
predictions <- c(0, 0, 0, 0)
# Punts
if(is.na(punt_dist[ydline])){
x_punt <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 80)
predictions[1] = 1 - mgcv::predict.bam(model, newdata = x_punt, type = "response")[1]
}
else{
x_punt <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 100-(ydline-punt_dist[ydline]))
predictions[1] = 1 - mgcv::predict.bam(model, newdata = x_punt, type = "response")[1]
}
# Field Goals
x_fg_success <- data.frame("margin" = -margin_curr - 3, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr - 3)/(time_left+1), "yardline_100" = 75)
fg_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_fg_success, type = "response")[1]
x_fg_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = min(80, 100-(ydline+8)))
fg_fail_wp <- 1 - mgcv::predict.bam(model, newdata = x_fg_fail, type = "response")[1]
predictions[2] = fg_prob[ydline]*(fg_success_wp)+(1-fg_prob[ydline])*(fg_fail_wp)
# Run Plays
if(ydstogo >= ydline){
x_run_success <- data.frame("margin" = -margin_curr - 6.970960661826777, "game_seconds_remaining" = time_left - run_times[ydstogo], "margin_time_ratio" = (-margin_curr-6.970960661826777)/(time_left - run_times[ydstogo]+1), "yardline_100" = 75)
run_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_run_success, type = "response")[1]
}
else{
x_run_success <- data.frame("margin" = margin_curr, "game_seconds_remaining" = time_left - run_times[ydstogo], "margin_time_ratio" = (margin_curr)/(time_left - run_times[ydstogo]+1), "yardline_100" = ydline-ydstogo)
run_success_wp <- mgcv::predict.bam(model, newdata = x_run_success, type = "response")[1]
}
x_run_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left - run_times[ydstogo], "margin_time_ratio" = (-margin_curr)/(time_left - run_times[ydstogo]+1), "yardline_100" = 100-(ydline - run_fail_yds_data[ydstogo, ydline+1]))
run_fail_wp <- 1-mgcv::predict.bam(model, newdata = x_run_fail, type = "response")[1]
predictions[3] = run_prob[ydstogo]*(run_success_wp)+(1-run_prob[ydstogo])*(run_fail_wp)
# Pass Plays
if(ydstogo >= ydline){
x_pass_success <- data.frame("margin" = -margin_curr - 6.970960661826777, "game_seconds_remaining" = time_left - pass_times[ydstogo], "margin_time_ratio" = (-margin_curr-6.970960661826777)/(time_left- pass_times[ydstogo]+1), "yardline_100" = 75)
pass_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_pass_success, type = "response")[1]
}
else{
x_pass_success <- data.frame("margin" = margin_curr, "game_seconds_remaining" = time_left- pass_times[ydstogo], "margin_time_ratio" = (margin_curr)/(time_left- pass_times[ydstogo]+1), "yardline_100" = ydline-ydstogo)
pass_success_wp <- mgcv::predict.bam(model, newdata = x_pass_success, type = "response")[1]
}
x_pass_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left- pass_times[ydstogo], "margin_time_ratio" = (-margin_curr)/(time_left- pass_times[ydstogo]+1), "yardline_100" = 100-(ydline - pass_fail_yds_data[ydstogo, ydline+1]))
pass_fail_wp <- 1-mgcv::predict.bam(model, newdata = x_pass_fail, type = "response")[1]
x_pass_intercept <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left- pass_times[ydstogo], "margin_time_ratio" = (-margin_curr)/(time_left- pass_times[ydstogo]+1), "yardline_100" = max(min(100-ydline - intercept_return[ydline], 99), 1))
pass_intercept_wp <- 1-mgcv::predict.bam(model, newdata = x_pass_intercept, type = "response")[1]
x_pick_six <- data.frame("margin" = margin_curr - 6.970960661826777, "game_seconds_remaining" = time_left- pass_times[ydstogo], "margin_time_ratio" = (margin_curr - 6.970960661826777)/(time_left- pass_times[ydstogo]+1), "yardline_100" = 75)
pick_six_wp <- mgcv::predict.bam(model, newdata = x_pick_six, type = "response")[1]
predictions[4] = pass_prob[ydstogo]*(pass_success_wp)+(1-pass_prob[ydstogo] - intercept_probs[ydline])*(pass_fail_wp) + intercept_probs[ydline]*pass_intercept_wp + intercept_td_probs[ydline]*pick_six_wp
print(predictions)
return(which.max(predictions))
}
f(90, 8, -7, 1700)
f(50, 8, -7, 1200)
f(39, 7, 7, 1700)
f(40, 9, 7, 1200)
f(90, 8, -7, 300)
f(50, 8, -7, 300)
f(39, 7, 7, 300)
f(40, 9, 7, 300)
f(50, 8, -20, 300)
f(50, 8, -10, 300)
f(50, 8, -8, 300)
f(50, 8, -7, 300)
f(50, 8, -3, 300)
f(50, 8, -14, 300)
f(43, 8, -7, 300)
f(43, 9, -7, 300)
f(43, 10, -7, 300)
f(43, 14, -7, 300)
f(40, 14, -7, 300)
library(mgcv)
data <- read.csv("nflmodeldatafirst.csv")
nfldata <- data[data$ydstogo == 10,]
nfldata$margin_time_ratio <- nfldata$margin/(nfldata$game_seconds_remaining + 1)
set.seed(143)
test.id = sample(seq(1,nrow(nfldata), 1), floor(nrow(nfldata)*0.3))
nfldata_test = nfldata[test.id,]
nfldata_train = nfldata[-test.id,]
model <- mgcv::bam(posteam_won ~ s(margin) + s(game_seconds_remaining) + s(margin_time_ratio) + s(yardline_100), data = nfldata_train, family = "binomial")
RMSE = function(y,yhat){
SSE = sum((y-yhat)^2, na.rm = T)
return(sqrt(SSE/length(y)))
}
summary(model)
RMSE(nfldata_test$posteam_won, predict(model, newdata = nfldata_test, type = "response"))
RMSE(nfldata_train$posteam_won, predict(model, newdata = nfldata_train, type = "response"))
library(MLmetrics)
print(LogLoss(model$fitted.values, nfldata_train$posteam_won))
library(mgcv)
nfldata <- read.csv("nflmodeldatafirst.csv")
nfldata$margin_time_ratio <- nfldata$margin/(nfldata$game_seconds_remaining + 1)
set.seed(143)
test.id = sample(seq(1,nrow(nfldata), 1), floor(nrow(nfldata)*0.3))
nfldata_test = nfldata[test.id,]
nfldata_train = nfldata[-test.id,]
model <- mgcv::bam(posteam_won ~ s(margin) + s(game_seconds_remaining) + s(margin_time_ratio) + s(yardline_100), data = nfldata_train, family = "binomial")
RMSE = function(y,yhat){
SSE = sum((y-yhat)^2, na.rm = T)
return(sqrt(SSE/length(y)))
}
summary(model)
RMSE(nfldata_test$posteam_won, predict(model, newdata = nfldata_test, type = "response"))
RMSE(nfldata_train$posteam_won, predict(model, newdata = nfldata_train, type = "response"))
library(MLmetrics)
print(LogLoss(model$fitted.values, nfldata_train$posteam_won))
library(mgcv)
nfldata <- read.csv("nflmodeldatafirst.csv")
nfldata$margin_time_ratio <- nfldata$margin/(nfldata$game_seconds_remaining + 1)
set.seed(143)
test.id = sample(seq(1,nrow(nfldata), 1), floor(nrow(nfldata)*0.3))
nfldata_test = nfldata[test.id,]
nfldata_train = nfldata[-test.id,]
logitmodel <- glm(posteam_won ~ margin + game_seconds_remaining + yardline_100, data = nfldata, family = "binomial")
RMSE = function(y,yhat){
SSE = sum((y-yhat)^2, na.rm = T)
return(sqrt(SSE/length(y)))
}
summary(logitmodel)
RMSE(nfldata_test$posteam_won, predict(logitmodel, newdata = nfldata_test, type = "response"))
RMSE(nfldata_train$posteam_won, predict(logitmodel, newdata = nfldata_train, type = "response"))
library(MLmetrics)
print(LogLoss(logitmodel$fitted.values, nfldata_train$posteam_won))
library(mgcv)
nfldata <- read.csv("nflmodeldatafirst.csv")
nfldata$margin_time_ratio <- nfldata$margin/(nfldata$game_seconds_remaining + 1)
set.seed(143)
test.id = sample(seq(1,nrow(nfldata), 1), floor(nrow(nfldata)*0.3))
nfldata_test = nfldata[test.id,]
nfldata_train = nfldata[-test.id,]
logitmodel <- glm(posteam_won ~ margin + game_seconds_remaining + yardline_100 + margin_time_ratio, data = nfldata, family = "binomial")
RMSE = function(y,yhat){
SSE = sum((y-yhat)^2, na.rm = T)
return(sqrt(SSE/length(y)))
}
summary(logitmodel)
RMSE(nfldata_test$posteam_won, predict(logitmodel, newdata = nfldata_test, type = "response"))
RMSE(nfldata_train$posteam_won, predict(logitmodel, newdata = nfldata_train, type = "response"))
library(MLmetrics)
print(LogLoss(logitmodel$fitted.values, nfldata_train$posteam_won))
library(mgcv)
nfldata <- read.csv("nflmodeldatafirst.csv")
nfldata$margin_time_ratio <- nfldata$margin/(nfldata$game_seconds_remaining + 1)
set.seed(143)
test.id = sample(seq(1,nrow(nfldata), 1), floor(nrow(nfldata)*0.3))
nfldata_test = nfldata[test.id,]
nfldata_train = nfldata[-test.id,]
logitmodel <- glm(posteam_won ~ margin + game_seconds_remaining + yardline_100, data = nfldata, family = "binomial")
RMSE = function(y,yhat){
SSE = sum((y-yhat)^2, na.rm = T)
return(sqrt(SSE/length(y)))
}
summary(logitmodel)
RMSE(nfldata_test$posteam_won, predict(logitmodel, newdata = nfldata_test, type = "response"))
RMSE(nfldata_train$posteam_won, predict(logitmodel, newdata = nfldata_train, type = "response"))
library(MLmetrics)
print(LogLoss(logitmodel$fitted.values, nfldata_train$posteam_won))
library(mgcv)
nfldata <- read.csv("nflmodeldatafirst.csv")
nfldata$margin_time_ratio <- nfldata$margin/(nfldata$game_seconds_remaining + 1)
set.seed(143)
test.id = sample(seq(1,nrow(nfldata), 1), floor(nrow(nfldata)*0.3))
nfldata_test = nfldata[test.id,]
nfldata_train = nfldata[-test.id,]
model <- mgcv::bam(posteam_won ~ s(margin) + s(game_seconds_remaining) + s(yardline_100), data = nfldata_train, family = "binomial")
RMSE = function(y,yhat){
SSE = sum((y-yhat)^2, na.rm = T)
return(sqrt(SSE/length(y)))
}
summary(model)
RMSE(nfldata_test$posteam_won, predict(model, newdata = nfldata_test, type = "response"))
RMSE(nfldata_train$posteam_won, predict(model, newdata = nfldata_train, type = "response"))
library(MLmetrics)
print(LogLoss(model$fitted.values, nfldata_train$posteam_won))
win_prob_prove <- c()
indices <- seq(0, 1800, by = 5)
for(i in indices){
margin = 7
secs = i
ydline = 50
x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
win_prob_prove <- c(win_prob_prove, mgcv::predict.bam(model, newdata = x, type = "response"))
}
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability")
# margin = 7
# secs = 600
# ydline = 50
# x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
# predicted <- mgcv::predict.bam(model, newdata = x, type = "response")
#
# print(predicted[1])
library(mgcv)
nfldata <- read.csv("nflmodeldatafirst.csv")
nfldata$margin_time_ratio <- nfldata$margin/(nfldata$game_seconds_remaining + 1)
set.seed(143)
test.id = sample(seq(1,nrow(nfldata), 1), floor(nrow(nfldata)*0.3))
nfldata_test = nfldata[test.id,]
nfldata_train = nfldata[-test.id,]
model <- mgcv::bam(posteam_won ~ s(margin) + s(game_seconds_remaining) + s(margin_time_ratio) + s(yardline_100), data = nfldata_train, family = "binomial")
RMSE = function(y,yhat){
SSE = sum((y-yhat)^2, na.rm = T)
return(sqrt(SSE/length(y)))
}
summary(model)
RMSE(nfldata_test$posteam_won, predict(model, newdata = nfldata_test, type = "response"))
RMSE(nfldata_train$posteam_won, predict(model, newdata = nfldata_train, type = "response"))
library(MLmetrics)
print(LogLoss(model$fitted.values, nfldata_train$posteam_won))
library(mgcv)
nfldata <- read.csv("nflmodeldatafirst.csv")
nfldata$margin_time_ratio <- nfldata$margin/(nfldata$game_seconds_remaining + 1)
set.seed(143)
test.id = sample(seq(1,nrow(nfldata), 1), floor(nrow(nfldata)*0.3))
nfldata_test = nfldata[test.id,]
nfldata_train = nfldata[-test.id,]
logitmodel <- glm(posteam_won ~ margin + game_seconds_remaining + yardline_100 + margin_time_ratio, data = nfldata, family = "binomial")
RMSE = function(y,yhat){
SSE = sum((y-yhat)^2, na.rm = T)
return(sqrt(SSE/length(y)))
}
summary(logitmodel)
RMSE(nfldata_test$posteam_won, predict(logitmodel, newdata = nfldata_test, type = "response"))
RMSE(nfldata_train$posteam_won, predict(logitmodel, newdata = nfldata_train, type = "response"))
library(MLmetrics)
print(LogLoss(logitmodel$fitted.values, nfldata_train$posteam_won))
win_prob_prove <- c()
indices <- seq(0, 1800, by = 5)
for(i in indices){
margin = 7
secs = i
ydline = 50
x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
win_prob_prove <- c(win_prob_prove, mgcv::predict.bam(model, newdata = x, type = "response"))
}
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability")
# margin = 7
# secs = 600
# ydline = 50
# x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
# predicted <- mgcv::predict.bam(model, newdata = x, type = "response")
#
# print(predicted[1])
win_prob_prove <- c()
indices <- seq(0, 1800, by = 5)
for(i in indices){
margin = 1
secs = i
ydline = 50
x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
win_prob_prove <- c(win_prob_prove, mgcv::predict.bam(model, newdata = x, type = "response"))
}
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability")
# margin = 7
# secs = 600
# ydline = 50
# x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
# predicted <- mgcv::predict.bam(model, newdata = x, type = "response")
#
# print(predicted[1])
calibPlot <- function(model, trainData){
trainCopy = trainData
trainCopy$predictedVals <- predict(model, newdata = trainData)
xPoints = rep(NA, 10)
yPoints = rep(NA, 10)
for(i in 1:10){
xPoints[i] = mean(trainCopy$predictedVals[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
yPoints[i] = mean(trainCopy$posteam_won[trainCopy$predictedVals <= 0.1*i & trainCopy$predictedVals >= 0.1*(i-1)], na.rm = TRUE)
}
print(xPoints)
print(yPoints)
plot(x = xPoints, y = yPoints, main = "Calibration Plot", xlab = "Predicted Probability", ylab = "Actual Proportion of Wins", ylim = c(0, 1))
}
calibPlot(model, nfldata_train)
