scale_fill_manual(
values=col,
breaks=c("1","2","3","4","5"),
labels=c("one","two","three","four","five"))
print(df)
testReverted <- as.numeric(testMat)
testReverted <- as.numeric(testMat)
print(testReverted)
test = rep(1, 99*20)
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
print(testReverted)
library(reshape2); library(ggplot2)
col <- c("red", "green")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(1:99, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=ydtogo,y=max(df$ydline)+1-ydline))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
values=col,
breaks=c("1","5"),
labels=c("one","five"))
p
test = rep(1, 99*20)
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
print(testReverted)
library(reshape2); library(ggplot2)
col <- c("red", "green")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(1:99, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=max(df$ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
values=col,
breaks=c("1","5"),
labels=c("one","five"))
p
test = rep(1, 99*20)
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
print(testReverted)
library(reshape2); library(ggplot2)
col <- c("red", "green")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(1:99, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=ydtogo,y=max(ydline)+1-ydline))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
values=col,
breaks=c("1","5"),
labels=c("one","five"))
p
test = rep(1, 99*20)
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
print(testReverted)
library(reshape2); library(ggplot2)
col <- c("red", "green")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(99:1, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=ydtogo,y=max(ydline)+1-ydline))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
values=col,
breaks=c("1","5"),
labels=c("one","five"))
p
test = rep(1, 99*20)
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
print(testReverted)
library(reshape2); library(ggplot2)
col <- c("red", "green")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(99:1, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
values=col,
breaks=c("1","5"),
labels=c("one","five"))
p
test = rep(1, 99*20)
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
print(testReverted)
library(reshape2); library(ggplot2)
col <- c("red", "green")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(99:1, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
values=col,
breaks=c("1","5"),
labels=c("one","five")) +
scale_y_reverse()
p
test <- c()
for(ydline in 1:99){
for(ydtogo in 1:20){
test = c(test, f(ydline, ydtogo, 7, 600))
}
}
test <- rep(1, 99*20)
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
print(testReverted)
library(reshape2); library(ggplot2)
col <- c("red", "green")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(99:1, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
values=col,
breaks=c("1","5"),
labels=c("one","five")) +
scale_y_reverse()
p
col <- c("red", "green")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(99:1, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
values=col,
breaks=c("1","5"),
labels=c("Punt","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin +7")
p
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
values=col,
breaks=c("1","5"),
labels=c("Punt","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5))
p
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","5"),
labels=c("Punt","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","5"),
labels=c("Punt","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw() +
xlab("Yardline") +
ylab("Yards to Go")
p
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","5"),
labels=c("Punt","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin +7") +
theme_bw(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","5"),
labels=c("Punt","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
test <- c()
for(ydline in 1:99){
for(ydtogo in 1:20){
test = c(test, f(ydline, ydtogo, 7, 600))
}
}
test <- rep(1, 99*20)
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
print(testReverted)
library(reshape2); library(ggplot2)
col <- c("red", "blue", "green", "yellow", "white")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(99:1, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
test <- c()
for(ydline in 1:99){
for(ydtogo in 1:20){
test = c(test, f(ydline, ydtogo, 7, 600))
}
}
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
library(reshape2); library(ggplot2)
col <- c("red", "blue", "green", "yellow", "white")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(99:1, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
test <- c()
for(ydline in 1:99){
for(ydtogo in 1:20){
test = c(test, f(ydline, ydtogo, 7, 1700))
}
}
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
library(reshape2); library(ggplot2)
col <- c("red", "blue", "green", "yellow", "white")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(99:1, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
test <- c()
for(ydline in 1:99){
for(ydtogo in 1:20){
test = c(test, f(ydline, ydtogo, -7, 600))
}
}
testMat <- matrix(test, nrow = 20)
for(i in 1:99){
for(j in 1:20){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
library(reshape2); library(ggplot2)
col <- c("red", "blue", "green", "yellow", "white")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:20, 99), ydline = rep(99:1, each = 20), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin -7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
f(5, 1, 7, 600)
f(5, 1, -7, 600)
f(5, 1, -35, 600)
f(5, 1, 35, 600)
f(35, 1, 35, 600)
f(35, 8, 35, 600)
f(35, 8, -35, 600)
f(35, 8, -35, 6)
f(35, 8, -35, 600)
f(35, 8, -35, 6)
f(35, 8, 7, 6)
f(35, 8, 7, 600)
f(35, 8, 70, 600)
f(35, 8, 1, 600)
f(35, 8, 2, 600)
f(55, 8, 2, 600)
f(55, 8, -50, 600)
f(55, 8, -50, 3000)
f(55, 8, 20, 3000)
f(55, 8, 1000, 3000)
f(20, 8, 1000, 3000)
f(20, 8, 2, 3000)
f(20, 8, 100, 3000)
f(20, 8, 500, 3000)
f(5, 8, 500, 3000)
f(5, 8, 20, 3000)
f(5, 8, 1, 3000)
f(5, 5, 1, 3000)
f(5, 5, 100, 3000)
f(5, 5, 1000, 3000)
f(5, 5, 600, 3000)
f <- function(ydline, ydstogo, margin_curr, time_left){
predictions <- c(0, 0, 0, 0)
x_punt <- data.frame("expected_margin" = margin_curr + punt[ydline], "game_seconds_remaining" = time_left, "margin_time_ratio" = (margin_curr + punt[ydline])/(time_left+1))
predictions[1] = mgcv::predict.bam(model, newdata = x_punt, type = "response")[1]
x_fg <- data.frame("expected_margin" = margin_curr + fg[ydline], "game_seconds_remaining" = time_left, "margin_time_ratio" = (margin_curr + fg[ydline])/(time_left+1))
predictions[2] = mgcv::predict.bam(model, newdata = x_fg, type = "response")[1]
x_run <- data.frame("expected_margin" = margin_curr + run_points[[ydline+1]][ydstogo], "game_seconds_remaining" = time_left, "margin_time_ratio" = (margin_curr + run_points[[ydline+1]][ydstogo])/(time_left+1))
predictions[3] = mgcv::predict.bam(model, newdata = x_run, type = "response")[1]
x_pass <- data.frame("expected_margin" = margin_curr + pass_points[[ydline+1]][ydstogo], "game_seconds_remaining" = time_left, "margin_time_ratio" = (margin_curr + pass_points[[ydline+1]][ydstogo])/(time_left+1))
predictions[4] = mgcv::predict.bam(model, newdata = x_pass, type = "response")[1]
print(predictions)
return(which.max(predictions))
}
f(8, 5, 600, 3000)
f(8, 5, 50, 3000)
f(8, 5, 2, 3000)
f(8, 5, 3, 3000)
f(8, 5, 4, 3000)
f(8, 5, 5, 3000)
f(8, 5, 3, 3000)
f(8, 5, 6, 3000)
f(8, 5, 10, 3000)
f(8, 5, 15, 3000)
f(8, 5, 18, 3000)
f(8, 5, 20, 3000)
f(8, 5, 25, 3000)
f(8, 5, 30, 3000)
f(8, 5, 35, 3000)
f(8, 5, 50, 3000)
f(8, 5, 100, 3000)
f(8, 5, 60, 3000)
f(8, 5, 60, 500)
f(8, 5, 2, 500)
f(8, 5, 2, 40)
f(8, 5, 2, 3)
f(8, 5, 2, 60)
f(8, 5, 8, 60)
f(8, 5, -8, 60)
f(8, 5, 8, 60)
f(8, 5, -10, 60)
