}
else{
x_run_success <- data.frame("margin" = margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (margin_curr)/(time_left+1), "yardline_100" = ydline-ydstogo)
run_success_wp <- mgcv::predict.bam(model, newdata = x_run_success, type = "response")[1]
}
x_run_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 100-ydline)
run_fail_wp <- 1-mgcv::predict.bam(model, newdata = x_run_fail, type = "response")[1]
print(run_success_wp)
predictions[3] = run_prob[ydstogo]*(run_success_wp)+(1-run_prob[ydstogo])*(run_fail_wp)
# Pass Plays
if(ydstogo >= ydline){
x_pass_success <- data.frame("margin" = -margin_curr - 6, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr-6)/(time_left+1), "yardline_100" = 75)
pass_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_pass_success, type = "response")[1]
}
else{
x_pass_success <- data.frame("margin" = margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (margin_curr)/(time_left+1), "yardline_100" = ydline-ydstogo)
pass_success_wp <- mgcv::predict.bam(model, newdata = x_pass_success, type = "response")[1]
}
x_pass_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 100-ydline)
pass_fail_wp <- 1-mgcv::predict.bam(model, newdata = x_pass_fail, type = "response")[1]
predictions[4] = pass_prob[ydstogo]*(pass_success_wp)+(1-pass_prob[ydstogo])*(pass_fail_wp)
print(predictions)
return(which.max(predictions))
}
margin = 7
secs = 600
ydline = 40
x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
predicted <- mgcv::predict.bam(model, newdata = x, type = "response")
print(predicted[1])
fg_prob <- c(0.98800242, 0.9873583,  0.98599963, 0.98392644, 0.9811387,  0.97763643,
0.97341963, 0.96848829, 0.96284241, 0.956482,   0.94940705, 0.94103738,
0.93370957, 0.9242918,  0.91607366, 0.90705404, 0.89110836, 0.88207813,
0.86965501, 0.86092923, 0.84712799, 0.83384908, 0.8178289,  0.80999701,
0.79376074, 0.78583387, 0.77255554, 0.75270675, 0.74333302, 0.73419326,
0.71489071, 0.69695817, 0.68173526, 0.66772373, 0.63855625, 0.5953817,
0.58327118, 0.56314188, 0.53097528, 0.492813,  0.4443912,  0.3956127,
0.3437673,  0.29433238, 0.23839377, 0.19436514, 0.14815106, 0.10367735,
0.07805278, 0.04877408, 0.01999607, 0.00185713, 0,         0,
0,         0,         0,         0,         0,         0,
0,         0,         0,         0,         0,         0,
0,         0,         0,         0,         0,         0,
0,        0,         0,         0,         0,         0,
0,         0,         0,        0,         0,         0,
0,         0,         0,       0,         0,        0,
0,        0,        0,         0,        0,         0,
0,        0,         0)
run_prob <- c(0.66517814, 0.6114814,  0.55893096, 0.50774364, 0.45813627, 0.41032565,
0.36452863, 0.320962,   0.27984261, 0.24138727, 0.2058128,  0.17333602,
0.14417376, 0.11854284, 0.09666007, 0.07874229, 0.06500631, 0.05566895,
0.05094704, 0.0510574)
pass_prob <- c(0.56292782, 0.53162334, 0.50022819, 0.46887784, 0.43770777, 0.40685347,
0.37645042, 0.3466341,  0.31753999, 0.28930358, 0.26206034, 0.23594576,
0.21109532, 0.18764451, 0.1657288,  0.14548367, 0.12704462, 0.11054711,
0.09612664, 0.08391869)
punt_dist <- c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 21.0, 26.5, 22.4, 24.88888888888889, 24.429193899782135, 26.46545454545455, 28.542857142857144, 27.91130152848541, 29.436291370480774, 30.610798122065727, 30.971176377314613, 31.211294924818056, 32.243573667711594, 33.320163865117436, 33.58655041028643, 34.50034435261708, 35.02321112406616, 35.61324863883848, 36.076719981633126, 37.68129325782876, 37.21049030029232, 38.40101311953353, 39.26357466063348, 38.96897341449184, 39.13529143897996, 39.98149669335189, 39.85393495393495, 40.836193457466045, 40.95232506967874, 41.29328334204495, 42.23055255008767, 42.76913759890205, 41.988013241988135, 41.49182144020853, 41.10843769396473, 40.9212056199051, 42.445724175376675, 41.87753866088279, 42.80360309001928, 42.0337023657926, 42.16289637459251, 41.957361487795424, 41.3757902670112, 42.284343423176416, 42.01238879736408, 42.01292618353567, 41.69901089601185, 41.45657142857143, 42.180161433448426, 42.08737162263533, 42.38751826002272, 42.82375855805505, 42.721235546107515, 41.87293144208037, 41.513856352057196, 42.88216312056738, 42.68820695433599, 42.44019386410691, 43.09244203553146, 41.92926490984744, 42.57208165397821, 42.77272727272727, 42.62045700778095, 42.6332425892317, 40.905841269841275, 41.660869565217396, 41.84690220174091, 40.98076923076923, 39.99032258064516, 39.88888888888889)
f <- function(ydline, ydstogo, margin_curr, time_left){
predictions <- c(0, 0, 0, 0)
# Punts
if(is.na(punt_dist[ydline])){
x_punt <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 80)
predictions[1] = 1 - mgcv::predict.bam(model, newdata = x_punt, type = "response")[1]
}
else{
x_punt <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 100-(ydline-punt_dist[ydline]))
predictions[1] = 1 - mgcv::predict.bam(model, newdata = x_punt, type = "response")[1]
}
# Field Goals
x_fg_success <- data.frame("margin" = -margin_curr - 3, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr - 3)/(time_left+1), "yardline_100" = 75)
fg_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_fg_success, type = "response")[1]
x_fg_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = min(80, 100-(ydline+8)))
fg_fail_wp <- 1 - mgcv::predict.bam(model, newdata = x_fg_fail, type = "response")[1]
predictions[2] = fg_prob[ydline]*(fg_success_wp)+(1-fg_prob[ydline])*(fg_fail_wp)
# Run Plays
if(ydstogo >= ydline){
x_run_success <- data.frame("margin" = -margin_curr - 6, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr-6)/(time_left+1), "yardline_100" = 75)
run_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_run_success, type = "response")[1]
}
else{
x_run_success <- data.frame("margin" = margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (margin_curr)/(time_left+1), "yardline_100" = ydline-ydstogo)
run_success_wp <- mgcv::predict.bam(model, newdata = x_run_success, type = "response")[1]
}
x_run_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 100-ydline)
run_fail_wp <- 1-mgcv::predict.bam(model, newdata = x_run_fail, type = "response")[1]
print(run_success_wp)
predictions[3] = run_prob[ydstogo]*(run_success_wp)+(1-run_prob[ydstogo])*(run_fail_wp)
# Pass Plays
if(ydstogo >= ydline){
x_pass_success <- data.frame("margin" = -margin_curr - 6, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr-6)/(time_left+1), "yardline_100" = 75)
pass_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_pass_success, type = "response")[1]
}
else{
x_pass_success <- data.frame("margin" = margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (margin_curr)/(time_left+1), "yardline_100" = ydline-ydstogo)
pass_success_wp <- mgcv::predict.bam(model, newdata = x_pass_success, type = "response")[1]
}
x_pass_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 100-ydline)
pass_fail_wp <- 1-mgcv::predict.bam(model, newdata = x_pass_fail, type = "response")[1]
predictions[4] = pass_prob[ydstogo]*(pass_success_wp)+(1-pass_prob[ydstogo])*(pass_fail_wp)
print(predictions)
return(which.max(predictions))
}
f(99, 15, -20, 600)
f(15, 4, -7, 1200)
f(30, 2, 7, 600)
f(40, 9, 7, 1200)
f(40, 8, 7, 1200)
test <- c()
for(ydline in 1:99){
for(ydtogo in 1:15){
print(ydline)
print(ydtogo)
test = c(test, f(ydline, ydtogo, -7, 1200))
}
}
f <- function(ydline, ydstogo, margin_curr, time_left){
predictions <- c(0, 0, 0, 0)
# Punts
if(is.na(punt_dist[ydline])){
x_punt <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 80)
predictions[1] = 1 - mgcv::predict.bam(model, newdata = x_punt, type = "response")[1]
}
else{
x_punt <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 100-(ydline-punt_dist[ydline]))
predictions[1] = 1 - mgcv::predict.bam(model, newdata = x_punt, type = "response")[1]
}
# Field Goals
x_fg_success <- data.frame("margin" = -margin_curr - 3, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr - 3)/(time_left+1), "yardline_100" = 75)
fg_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_fg_success, type = "response")[1]
x_fg_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = min(80, 100-(ydline+8)))
fg_fail_wp <- 1 - mgcv::predict.bam(model, newdata = x_fg_fail, type = "response")[1]
predictions[2] = fg_prob[ydline]*(fg_success_wp)+(1-fg_prob[ydline])*(fg_fail_wp)
# Run Plays
if(ydstogo >= ydline){
x_run_success <- data.frame("margin" = -margin_curr - 6, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr-6)/(time_left+1), "yardline_100" = 75)
run_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_run_success, type = "response")[1]
}
else{
x_run_success <- data.frame("margin" = margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (margin_curr)/(time_left+1), "yardline_100" = ydline-ydstogo)
run_success_wp <- mgcv::predict.bam(model, newdata = x_run_success, type = "response")[1]
}
x_run_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 100-ydline)
run_fail_wp <- 1-mgcv::predict.bam(model, newdata = x_run_fail, type = "response")[1]
predictions[3] = run_prob[ydstogo]*(run_success_wp)+(1-run_prob[ydstogo])*(run_fail_wp)
# Pass Plays
if(ydstogo >= ydline){
x_pass_success <- data.frame("margin" = -margin_curr - 6, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr-6)/(time_left+1), "yardline_100" = 75)
pass_success_wp <- 1 - mgcv::predict.bam(model, newdata = x_pass_success, type = "response")[1]
}
else{
x_pass_success <- data.frame("margin" = margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (margin_curr)/(time_left+1), "yardline_100" = ydline-ydstogo)
pass_success_wp <- mgcv::predict.bam(model, newdata = x_pass_success, type = "response")[1]
}
x_pass_fail <- data.frame("margin" = -margin_curr, "game_seconds_remaining" = time_left, "margin_time_ratio" = (-margin_curr)/(time_left+1), "yardline_100" = 100-ydline)
pass_fail_wp <- 1-mgcv::predict.bam(model, newdata = x_pass_fail, type = "response")[1]
predictions[4] = pass_prob[ydstogo]*(pass_success_wp)+(1-pass_prob[ydstogo])*(pass_fail_wp)
return(which.max(predictions))
}
f(99, 15, -20, 600)
f(15, 4, -7, 1200)
f(30, 2, 7, 600)
f(40, 8, 7, 1200)
f(40, 9, -7, 1200)
f(50, 8, -7, 1200)
f(50, 8, 7, 1200)
test <- c()
for(ydline in 1:99){
for(ydtogo in 1:15){
print(ydline)
print(ydtogo)
test = c(test, f(ydline, ydtogo, -7, 1200))
}
}
testMat <- matrix(test, nrow = 15)
for(i in 1:99){
for(j in 1:15){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
library(reshape2); library(ggplot2)
col <- c("red", "blue", "green", "yellow", "white")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:15, 99), ydline = rep(99:1, each = 15), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 10 Min. Remaining \n and Score Margin -7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 20 Min. Remaining \n and Score Margin -7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
test <- c()
for(ydline in 1:99){
for(ydtogo in 1:15){
print(ydline)
print(ydtogo)
test = c(test, f(ydline, ydtogo, 7, 1200))
}
}
testMat <- matrix(test, nrow = 15)
for(i in 1:99){
for(j in 1:15){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
library(reshape2); library(ggplot2)
col <- c("red", "blue", "green", "yellow", "white")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:15, 99), ydline = rep(99:1, each = 15), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 20 Min. Remaining \n and Score Margin -7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 20 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
f(50, 8, -20, 600)
f(50, 8, -7, 1200)
f(50, 8, 7, 600)
f(50, 8, 7, 1200)
f(10, 8, -7, 600)
f(10, 8, -7, 1200)
f(50, 8, 7, 600)
f(50, 8, 7, 1200)
f(10, 8, -7, 1700)
f(10, 8, -7, 1200)
f(50, 8, 7, 1700)
f(50, 8, 7, 1200)
f(40, 8, -7, 1200)
f(40, 8, -7, 1700)
f(40, 8, -7, 1700)
f(40, 8, -7, 1200)
f(50, 8, 7, 1700)
f(50, 8, 7, 1200)
f(40, 7, -7, 1700)
f(40, 7, -7, 1200)
f(50, 8, 7, 1700)
f(50, 8, 7, 1200)
f(40, 9, -7, 1200)
f(40, 9, -7, 1700)
f(40, 9, -7, 1200)
f(50, 8, 7, 1700)
f(50, 8, 7, 1200)
f(41, 8, -7, 1700)
f(41, 8, -7, 1200)
f(50, 8, 7, 1700)
f(50, 8, 7, 1200)
f(39, 8, -7, 1700)
f(39, 8, -7, 1200)
f(50, 8, 7, 1700)
f(50, 8, 7, 1200)
f(45, 8, -7, 1700)
f(45, 8, -7, 1200)
f(50, 8, 7, 1700)
f(50, 8, 7, 1200)
f(45, 9, -7, 1700)
f(45, 9, -7, 1200)
f(50, 8, 7, 1700)
f(50, 8, 7, 1200)
f(45, 10, -7, 1700)
f(45, 10, -7, 1200)
f(50, 8, 7, 1700)
f(50, 8, 7, 1200)
f(40, 8, -7, 1700)
f(40, 8, -7, 1200)
f(50, 8, 7, 1700)
f(50, 8, 7, 1200)
f(40, 8, 7, 1200)
f(40, 8, 7, 1700)
f(39, 8, 7, 1200)
f(39, 8, 7, 1700)
f(39, 8, 7, 1700)
f(39, 8, 7, 1200)
f(40, 8, -7, 1700)
f(40, 8, -7, 1200)
f(40, 8, 7, 1700)
f(40, 8, 7, 1200)
test <- c()
for(ydline in 1:99){
for(ydtogo in 1:15){
print(ydline)
print(ydtogo)
test = c(test, f(ydline, ydtogo, -7, 1700))
}
}
testMat <- matrix(test, nrow = 15)
for(i in 1:99){
for(j in 1:15){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
library(reshape2); library(ggplot2)
col <- c("red", "blue", "green", "yellow", "white")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:15, 99), ydline = rep(99:1, each = 15), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 20 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 28.33 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 28.33 Min. Remaining \n and Score Margin -7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
test <- c()
for(ydline in 1:99){
for(ydtogo in 1:15){
print(ydline)
print(ydtogo)
test = c(test, f(ydline, ydtogo, 7, 1700))
}
}
testMat <- matrix(test, nrow = 15)
for(i in 1:99){
for(j in 1:15){
if(i < j){
testMat[j, i] = 5
}
if((10-j)+i>99){
testMat[j, i] = 5
}
}
}
testReverted <- as.numeric(testMat)
library(reshape2); library(ggplot2)
col <- c("red", "blue", "green", "yellow", "white")
colnames(testMat) <- seq(1, 99, by = 1)
df <- data.frame(ydtogo = rep(1:15, 99), ydline = rep(99:1, each = 15), decision = testReverted)
p<-ggplot(df,aes(x=max(ydline)+1-ydline,y=ydtogo))+
#tile layer
geom_tile(aes(fill=factor(decision))) +
#setting the color
scale_fill_manual(
"Play Type",
values=col,
breaks=c("1","2","3","4","5"),
labels=c("Punt","Field Goal", "Run", "Pass","Impossible")) +
scale_y_reverse() +
ggtitle("NFL Fourth Down, 28.33 Min. Remaining \n and Score Margin +7") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Yardline") +
ylab("Yards to Go")
p
win_prob_prove <- c()
indices <- seq()
for(i in -10:10){
margin = i
secs = 600
ydline = 50
x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
win_prob_prove <- c(win_prob_prove, mgcv::predict.bam(model, newdata = x, type = "response"))
}
# margin = 7
# secs = 600
# ydline = 50
# x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
# predicted <- mgcv::predict.bam(model, newdata = x, type = "response")
#
# print(predicted[1])
indices <- seq(-10, 10, by = 1)
plot(x = indices, y = win_prob_prove)
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Margin \n Ydline = 50, 10 Min. Left")
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Margin \n Ydline = 50, 10 Min. Left", xlab = "Score Margin", ylab = "Win Probability")
win_prob_prove <- c()
indices <- seq(0, 3600, by = 10)
for(i in indices){
margin = 1
secs = i
ydline = 50
x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
win_prob_prove <- c(win_prob_prove, mgcv::predict.bam(model, newdata = x, type = "response"))
}
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability")
# margin = 7
# secs = 600
# ydline = 50
# x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
# predicted <- mgcv::predict.bam(model, newdata = x, type = "response")
#
# print(predicted[1])
win_prob_prove <- c()
indices <- seq(0, 3600, by = 10)
for(i in indices){
margin = 7
secs = i
ydline = 50
x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
win_prob_prove <- c(win_prob_prove, mgcv::predict.bam(model, newdata = x, type = "response"))
}
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability")
# margin = 7
# secs = 600
# ydline = 50
# x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
# predicted <- mgcv::predict.bam(model, newdata = x, type = "response")
#
# print(predicted[1])
win_prob_prove <- c()
indices <- seq(0, 1800, by = 5)
for(i in indices){
margin = 7
secs = i
ydline = 50
x <- data.frame("margin" = margin, "game_seconds_remaining" = secs, "margin_time_ratio" = margin/(secs+1), "yardline_100" = ydline)
win_prob_prove <- c(win_prob_prove, mgcv::predict.bam(model, newdata = x, type = "response"))
}
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability", xlim = (0, 1))
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability", xlim = range(0:1))
print(win_prob_prove)
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability", xlim = range(0:1))
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability", xmin = 0)
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability", xlim = c(0, 1))
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability", ylim = c(0, 1))
plot(x = indices, y = win_prob_prove, main = "Win Prob. vs. Time \n Ydline = 50, Margin = +1", xlab = "Seconds Remaining", ylab = "Win Probability")
